// <auto-generated />
using System;
using App.InfraStructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.InfraStructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.BaseData.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasDiscriminator().HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.About", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("About");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.ContactUs", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("ContactUs_Description");

                            t.Property("Title")
                                .HasColumnName("ContactUs_Title");
                        });

                    b.HasDiscriminator().HasValue("ContactUs");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.PayRules", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("PayRules_Description");

                            t.Property("Title")
                                .HasColumnName("PayRules_Title");
                        });

                    b.HasDiscriminator().HasValue("PayRules");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.ReturnRules", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("ReturnRules_Description");

                            t.Property("Title")
                                .HasColumnName("ReturnRules_Title");
                        });

                    b.HasDiscriminator().HasValue("ReturnRules");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.Rules", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Rules_Description");

                            t.Property("Title")
                                .HasColumnName("Rules_Title");
                        });

                    b.HasDiscriminator().HasValue("Rules");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.SaleRules", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("SaleRules_Description");

                            t.Property("Title")
                                .HasColumnName("SaleRules_Title");
                        });

                    b.HasDiscriminator().HasValue("SaleRules");
                });

            modelBuilder.Entity("App.Domain.Entities.BaseData.SendRules", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("SendRules_Description");

                            t.Property("Title")
                                .HasColumnName("SendRules_Title");
                        });

                    b.HasDiscriminator().HasValue("SendRules");
                });

            modelBuilder.Entity("App.Domain.Entities.Baskets.Basket", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<DateTime>("DeleteItemDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Basket");
                });

            modelBuilder.Entity("App.Domain.Entities.Blogs.Blog", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("BlogCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Blog_Description");
                        });

                    b.HasDiscriminator().HasValue("Blog");
                });

            modelBuilder.Entity("App.Domain.Entities.Blogs.BlogCategory", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("BlogCategory_Description");

                            t.Property("Name")
                                .HasColumnName("BlogCategory_Name");
                        });

                    b.HasDiscriminator().HasValue("BlogCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Comments.Comment", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Comment_Description");

                            t.Property("Title")
                                .HasColumnName("Comment_Title");

                            t.Property("UserId")
                                .HasColumnName("Comment_UserId");
                        });

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("App.Domain.Entities.Faqs.Faq", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaqCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FaqCategoryId");

                    b.HasDiscriminator().HasValue("Faq");
                });

            modelBuilder.Entity("App.Domain.Entities.Faqs.FaqCategory", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("FaqCategory_Image");

                            t.Property("Name")
                                .HasColumnName("FaqCategory_Name");
                        });

                    b.HasDiscriminator().HasValue("FaqCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Learnings.Learning", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("LearningCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Video")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasIndex("LearningCategoryId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("Learning_Image");

                            t.Property("Title")
                                .HasColumnName("Learning_Title");
                        });

                    b.HasDiscriminator().HasValue("Learning");
                });

            modelBuilder.Entity("App.Domain.Entities.Learnings.LearningCategory", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Discription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("LearningCategory_Image");

                            t.Property("Name")
                                .HasColumnName("LearningCategory_Name");
                        });

                    b.HasDiscriminator().HasValue("LearningCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.BaseDataMessage", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<DateTime>("DeliveredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Massage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("link")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("BaseDataMessage_UserId");
                        });

                    b.HasDiscriminator().HasValue("BaseDataMessage");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.SmsCode", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("PhoneNumber")
                                .HasColumnName("SmsCode_PhoneNumber");

                            t.Property("UserId")
                                .HasColumnName("SmsCode_UserId");
                        });

                    b.HasDiscriminator().HasValue("SmsCode");
                });

            modelBuilder.Entity("App.Domain.Entities.NewsLetters.NewsLetter", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("NewsLetter");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.Order", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("SumPrice")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("Order_UserId");
                        });

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.OrderDetail", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("MelliCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Portal")
                        .HasColumnType("int");

                    b.Property<string>("PostalNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Email")
                                .HasColumnName("OrderDetail_Email");

                            t.Property("FullName")
                                .HasColumnName("OrderDetail_FullName");

                            t.Property("PhoneNumber")
                                .HasColumnName("OrderDetail_PhoneNumber");
                        });

                    b.HasDiscriminator().HasValue("OrderDetail");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("OrderId")
                                .HasColumnName("OrderItem_OrderId");

                            t.Property("ProductId")
                                .HasColumnName("OrderItem_ProductId");
                        });

                    b.HasDiscriminator().HasValue("OrderItem");
                });

            modelBuilder.Entity("App.Domain.Entities.Payment.Payment", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentResult")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionHexCode")
                        .HasColumnType("int");

                    b.Property<int>("TransactionNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("price")
                        .HasColumnType("bigint");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("OrderId")
                                .HasColumnName("Payment_OrderId");

                            t.Property("UserId")
                                .HasColumnName("Payment_UserId");
                        });

                    b.HasDiscriminator().HasValue("Payment");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.Favorite", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortlink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("Favorite_Image");

                            t.Property("ShortText")
                                .HasColumnName("Favorite_ShortText");

                            t.Property("Title")
                                .HasColumnName("Favorite_Title");

                            t.Property("UserId")
                                .HasColumnName("Favorite_UserId");
                        });

                    b.HasDiscriminator().HasValue("Favorite");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.Product", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCapacityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.Property<string>("ShortLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCapacityId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductPriceId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Product_Description");

                            t.Property("Image")
                                .HasColumnName("Product_Image");

                            t.Property("Name")
                                .HasColumnName("Product_Name");

                            t.Property("ShortText")
                                .HasColumnName("Product_ShortText");

                            t.Property("UserId")
                                .HasColumnName("Product_UserId");
                        });

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductBrand", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("ProductBrand_Name");
                        });

                    b.HasDiscriminator().HasValue("ProductBrand");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductCapacity", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Amount")
                                .HasColumnName("ProductCapacity_Amount");
                        });

                    b.HasDiscriminator().HasValue("ProductCapacity");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("ProductCategory_Description");

                            t.Property("Image")
                                .HasColumnName("ProductCategory_Image");

                            t.Property("Name")
                                .HasColumnName("ProductCategory_Name");
                        });

                    b.HasDiscriminator().HasValue("ProductCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductColor", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("ProductColor_Image");
                        });

                    b.HasDiscriminator().HasValue("ProductColor");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("ProductId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("ProductFeature_ProductId");
                        });

                    b.HasDiscriminator().HasValue("ProductFeature");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductGallery", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("ProductGallery_Image");

                            t.Property("ProductId")
                                .HasColumnName("ProductGallery_ProductId");
                        });

                    b.HasDiscriminator().HasValue("ProductGallery");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductPrice", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("Benefit")
                        .HasColumnType("int");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int>("ColeagugePrice")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("ProductId")
                                .HasColumnName("ProductPrice_ProductId");
                        });

                    b.HasDiscriminator().HasValue("ProductPrice");
                });

            modelBuilder.Entity("App.Domain.Entities.Profiles.Address", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("Cityid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Lan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Address_Description");

                            t.Property("Name")
                                .HasColumnName("Address_Name");

                            t.Property("UserId")
                                .HasColumnName("Address_UserId");
                        });

                    b.HasDiscriminator().HasValue("Address");
                });

            modelBuilder.Entity("App.Domain.Entities.Profiles.OrderList", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortlink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Image")
                                .HasColumnName("OrderList_Image");

                            t.Property("Price")
                                .HasColumnName("OrderList_Price");

                            t.Property("ShortText")
                                .HasColumnName("OrderList_ShortText");

                            t.Property("Shortlink")
                                .HasColumnName("OrderList_Shortlink");

                            t.Property("Title")
                                .HasColumnName("OrderList_Title");
                        });

                    b.HasDiscriminator().HasValue("OrderList");
                });

            modelBuilder.Entity("App.Domain.Entities.Roles.Role", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Role_Name");
                        });

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("App.Domain.Entities.Roles.UserRole", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("UserRole_UserId");
                        });

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.User", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("User_Description");

                            t.Property("Email")
                                .HasColumnName("User_Email");

                            t.Property("FullName")
                                .HasColumnName("User_FullName");

                            t.Property("Image")
                                .HasColumnName("User_Image");

                            t.Property("PhoneNumber")
                                .HasColumnName("User_PhoneNumber");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.UserToken", b =>
                {
                    b.HasBaseType("App.Domain.Entities.BaseData.BaseEntity");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcvtive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("ExpireDate")
                                .HasColumnName("UserToken_ExpireDate");

                            t.Property("PhoneNumber")
                                .HasColumnName("UserToken_PhoneNumber");

                            t.Property("Token")
                                .HasColumnName("UserToken_Token");

                            t.Property("UserId")
                                .HasColumnName("UserToken_UserId");
                        });

                    b.HasDiscriminator().HasValue("UserToken");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.PushNotification", b =>
                {
                    b.HasBaseType("App.Domain.Entities.Massages.BaseDataMessage");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("BaseDataMessage_UserId");
                        });

                    b.HasDiscriminator().HasValue("PushNotification");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.SMS", b =>
                {
                    b.HasBaseType("App.Domain.Entities.Massages.BaseDataMessage");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("BaseDataMessage_UserId");
                        });

                    b.HasDiscriminator().HasValue("SMS");
                });

            modelBuilder.Entity("App.Domain.Entities.Baskets.Basket", b =>
                {
                    b.HasOne("App.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Blogs.Blog", b =>
                {
                    b.HasOne("App.Domain.Entities.Blogs.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Comments.Comment", b =>
                {
                    b.HasOne("App.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Faqs.Faq", b =>
                {
                    b.HasOne("App.Domain.Entities.Faqs.FaqCategory", "FaqCategory")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaqCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Learnings.Learning", b =>
                {
                    b.HasOne("App.Domain.Entities.Learnings.LearningCategory", "LearningCategory")
                        .WithMany("Learnings")
                        .HasForeignKey("LearningCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.BaseDataMessage", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Massages.SmsCode", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany("SmsCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("App.Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("App.Domain.Entities.Payment.Payment", b =>
                {
                    b.HasOne("App.Domain.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.Favorite", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("App.Domain.Entities.Products.ProductBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Products.ProductCapacity", "ProductCapacity")
                        .WithMany("Products")
                        .HasForeignKey("ProductCapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Products.ProductColor", "ProductColor")
                        .WithMany("Products")
                        .HasForeignKey("ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Products.ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.User", null)
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCapacity");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductFeature", b =>
                {
                    b.HasOne("App.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductGallery", b =>
                {
                    b.HasOne("App.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductPrice", b =>
                {
                    b.HasOne("App.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Domain.Entities.Roles.UserRole", b =>
                {
                    b.HasOne("App.Domain.Entities.Roles.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.UserToken", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Blogs.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("App.Domain.Entities.Faqs.FaqCategory", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("App.Domain.Entities.Learnings.LearningCategory", b =>
                {
                    b.Navigation("Learnings");
                });

            modelBuilder.Entity("App.Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductGalleries");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductCapacity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Entities.Products.ProductColor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Domain.Entities.Roles.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Roles");

                    b.Navigation("SmsCodes");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
